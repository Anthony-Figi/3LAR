	package  {		import flash.display.MovieClip;	import flash.geom.ColorTransform;	import flash.events.*;	import flash.net.*;	import com.pixelbreaker.ui.osx.MacMouseWheel;		public class main extends MovieClip {				public var tree;		public var leaves;		public var tweetArray:Array = new Array();		public var treeArray:Array = new Array();		public var zScroll:Number = 1; 		public var yDiff = 0;				public function main() {						//http://blog.pixelbreaker.com/mac/as30-mousewheel-on-mac-os-x			MacMouseWheel.setup(this.stage);			this.zScroll = zScroll;			this.tweetArray = tweetArray;			this.treeArray = treeArray;			for (var i:Number=0; i<5; i++) {				var treeScale = randomRange(20, 100)/100;				var treeX = randomRange(300, 700);				var xDisp = (treeX-500)/4; //int(Math.random()*2) - 1 | 1;				trace("XD", xDisp);				var tree = new trunk(this, treeScale, treeX, xDisp);				treeArray.push(tree);				};			for (var t:Number=0; t<treeArray.length;t++){				this.addChild(treeArray[t]); 				};			stage.addEventListener(KeyboardEvent.KEY_DOWN, handleKeyDown);						//Generates leaf instances with random colour and position. 			//var leafGenerator:Array = new Array();			//for (var i:Number=0; i<350; i++) {				//var xPos = randomRange(130, 900);				//var yPos = randomRange(50, 500);				//var zRot = randomRange(10, 170);				//var leaves:leaf = new leaf(xPos, yPos, zRot);				//var my_color:ColorTransform = new ColorTransform();				//my_color.alphaMultiplier = 0.8;				//my_color.blueOffset = randomRange(-255, 255);				//my_color.greenOffset = randomRange(-100, 150);				//my_color.redOffset = randomRange(-50, 150);				//leaves.transform.colorTransform = my_color;				//leafGenerator.push(leaves);				//loadTweets();				//};									//Adds Leaves to the stage			//for (var q:Number=0; q<leafGenerator.length;q++){				//this.addChild(leafGenerator[q]); 			//}				}				public function randomRange(minNum:Number, maxNum:Number):Number {			return (Math.floor(Math.random()*(maxNum - minNum +1)) + minNum);		}				public function handleKeyDown(event:KeyboardEvent):void {			trace("You pressed key: "+event.keyCode);			if(event.keyCode == 38) {				updateTrees(0.1);			}			else if(event.keyCode == 40) {				updateTrees(-0.1);			}		}				//Iterates over each tree and updates their size, position and alpha		public function updateTrees(scaleAll) {						for (var q:Number=0; q<treeArray.length;q++){				var currentTree = this.treeArray[q];										//Adjusts scale depending on keyboard press/mouse scroll/gesture					if (currentTree.scaleX > 0.1 && currentTree.scaleX < 4) {						currentTree.scaleX += scaleAll;						currentTree.scaleY += scaleAll;					}					else if (currentTree.scaleX < 0.1) {									if (scaleAll > 0) {							currentTree.scaleX += scaleAll;							currentTree.scaleY += scaleAll;						}						else {							this.zScroll = 0;						}					}					else if (currentTree.scaleX > 4) {						if (scaleAll < 0) {							currentTree.scaleX += scaleAll;							currentTree.scaleY += scaleAll;						}						else {							this.zScroll = 0;						}					};										//Adjusts x position 					trace("X", currentTree.x);					trace("scaleX", currentTree.scaleX);					trace("Disp", currentTree.xD);					currentTree.x = currentTree.x + currentTree.scaleX*currentTree.xD*scaleAll*10;															//Adjust opacity depending on scale					if (currentTree.scaleX > 1) {						currentTree.alpha = (4 - currentTree.scaleX)/3					}					else if (currentTree.scaleX > 1 && currentTree.scaleX < 2) {						currentTree.alpha = 1;					}					else if (currentTree.scaleX < 1) {						currentTree.alpha = currentTree.scaleX + 0.2;					};													}		}					}}