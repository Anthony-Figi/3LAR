	package  {		import flash.display.MovieClip;	import flash.geom.ColorTransform;	import flash.events.*;	import flash.net.*;	import com.pixelbreaker.ui.osx.MacMouseWheel;		public class main extends MovieClip {				public var tree;		public var leaves;		public var foreground;		public var tweetArray:Array = new Array();		public var treeArray:Array = new Array();		public var zScroll:Number = 1; 		public var yDiff = 0;				public function main() {						//http://blog.pixelbreaker.com/mac/as30-mousewheel-on-mac-os-x			MacMouseWheel.setup(this.stage);			this.zScroll = zScroll;			this.tweetArray = tweetArray;			this.treeArray = treeArray;			this.foreground = new grass();						//Add Trees to array			for (var i:Number=0; i<5; i++) {				var zPos = randomRange(2000, 5000);				var treeX = randomRange(0, 1200);				var tree = new trunk(this, zPos, treeX);				treeArray.push(tree);				};						//sort Tree Array so the right trees appears in front			treeArray.sortOn( "z", Array.NUMERIC | Array.DESCENDING );						//add stuff to stage			this.addChild(this.foreground);			for (var t:Number=0; t<treeArray.length;t++){				this.addChild(treeArray[t]); 				};									stage.addEventListener(KeyboardEvent.KEY_DOWN, handleKeyDown);			}				public function randomRange(minNum:Number, maxNum:Number):Number {			return (Math.floor(Math.random()*(maxNum - minNum +1)) + minNum);		}				public function handleKeyDown(event:KeyboardEvent):void {			if(event.keyCode == 38) {				updateTrees(300);			}			else if(event.keyCode == 40) {				updateTrees(-300);			}		}				//Iterates over each tree and updates their size, position and alpha		public function updateTrees(zChange) {						for (var q:Number=0; q<treeArray.length;q++){				var currentTree = this.treeArray[q];									trace (currentTree.z);										//Adjusts scale depending on keyboard press/mouse scroll/gesture					if (currentTree.z > -600 && currentTree.z < 6000) {						currentTree.z += zChange;						//trace(currentTree.z);					}					else if (currentTree.z > 6000) {						if (zChange < 0) {							currentTree.z += zChange;						}					}					else if (currentTree.z < -600) {						if (zChange > 0) {							currentTree.z += zChange;						}					};										//Adjust opacity depending on zPos					if (currentTree.z < -100 && currentTree.z > -300) {						currentTree.alpha = 1-((currentTree.z+100)/-200);					}					else if (currentTree.z < -300) {						currentTree.alpha = 0;					}					else if (currentTree.z > 6000) {						currentTree.alpha = 0;					}					else if (currentTree.z > -100 && currentTree.z < 2000) {						currentTree.alpha = 1;					}					else if (currentTree.z < 6000 && currentTree.z > 2000) {						currentTree.alpha = 1-((currentTree.z-2000)/4000);					};																		}		}					}}